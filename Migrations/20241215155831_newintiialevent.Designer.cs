// <auto-generated />
using System;
using MVC_cours_isitech.data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MVC_cours_isitech.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241215155831_newintiialevent")]
    partial class newintiialevent
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("MVC_cours_isitech.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("MaxParticipants")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 12, 10, 16, 58, 31, 24, DateTimeKind.Local).AddTicks(6909),
                            Description = "Découvrez les fondamentaux de l'IA et ses applications dans le monde moderne",
                            EventDate = new DateTime(2024, 12, 22, 16, 58, 31, 24, DateTimeKind.Local).AddTicks(6894),
                            Location = "Amphithéâtre A",
                            MaxParticipants = 100,
                            Title = "Introduction à l'Intelligence Artificielle"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 12, 12, 16, 58, 31, 24, DateTimeKind.Local).AddTicks(6915),
                            Description = "Pratiques et outils essentiels pour le DevOps moderne",
                            EventDate = new DateTime(2024, 12, 29, 16, 58, 31, 24, DateTimeKind.Local).AddTicks(6914),
                            Location = "Salle Informatique 2",
                            MaxParticipants = 50,
                            Title = "Workshop DevOps"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 12, 8, 16, 58, 31, 24, DateTimeKind.Local).AddTicks(6920),
                            Description = "Les dernières tendances en matière de sécurité informatique",
                            EventDate = new DateTime(2025, 1, 5, 16, 58, 31, 24, DateTimeKind.Local).AddTicks(6918),
                            Location = "Amphithéâtre B",
                            MaxParticipants = 150,
                            Title = "Conférence Cybersécurité"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 12, 5, 16, 58, 31, 24, DateTimeKind.Local).AddTicks(6924),
                            Description = "48h pour développer des solutions innovantes",
                            EventDate = new DateTime(2025, 1, 14, 16, 58, 31, 24, DateTimeKind.Local).AddTicks(6923),
                            Location = "Campus Innovation Hub",
                            MaxParticipants = 80,
                            Title = "Hackathon Innovation"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 11, 30, 16, 58, 31, 24, DateTimeKind.Local).AddTicks(6941),
                            Description = "Explorer l'avenir du web décentralisé",
                            EventDate = new DateTime(2024, 12, 13, 16, 58, 31, 24, DateTimeKind.Local).AddTicks(6939),
                            Location = "Salle de Conférence C",
                            MaxParticipants = 120,
                            Title = "Web 3.0 et Blockchain"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 12, 13, 16, 58, 31, 24, DateTimeKind.Local).AddTicks(6946),
                            Description = "Un weekend complet dédié à la création de jeux vidéo. Venez avec vos idées et repartez avec un prototype jouable !",
                            EventDate = new DateTime(2025, 1, 29, 16, 58, 31, 24, DateTimeKind.Local).AddTicks(6945),
                            Location = "Espace Gaming",
                            MaxParticipants = 60,
                            Title = "Game Jam - Création de Jeux Vidéo"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 12, 7, 16, 58, 31, 24, DateTimeKind.Local).AddTicks(6951),
                            Description = "Initiation pratique à Python et aux bibliothèques de data science (Pandas, NumPy, Scikit-learn)",
                            EventDate = new DateTime(2024, 12, 25, 16, 58, 31, 24, DateTimeKind.Local).AddTicks(6949),
                            Location = "Laboratoire Data",
                            MaxParticipants = 30,
                            Title = "Workshop Data Science"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 12, 11, 16, 58, 31, 24, DateTimeKind.Local).AddTicks(6955),
                            Description = "Découvrez les services fondamentaux d'Amazon Web Services et déployez votre première application",
                            EventDate = new DateTime(2024, 12, 30, 16, 58, 31, 24, DateTimeKind.Local).AddTicks(6953),
                            Location = "Salle Cloud",
                            MaxParticipants = 40,
                            Title = "Cloud Computing - AWS Basics"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 12, 9, 16, 58, 31, 24, DateTimeKind.Local).AddTicks(6967),
                            Description = "Apprenez à résoudre des problèmes complexes avec la méthodologie du Design Thinking",
                            EventDate = new DateTime(2024, 12, 20, 16, 58, 31, 24, DateTimeKind.Local).AddTicks(6957),
                            Location = "Studio Design",
                            MaxParticipants = 25,
                            Title = "Design Thinking Workshop"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 12, 14, 16, 58, 31, 24, DateTimeKind.Local).AddTicks(7006),
                            Description = "Formation intensive sur le développement d'applications mobiles avec Flutter",
                            EventDate = new DateTime(2025, 2, 13, 16, 58, 31, 24, DateTimeKind.Local).AddTicks(7005),
                            Location = "Lab Mobile",
                            MaxParticipants = 35,
                            Title = "Mobile App Development"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2024, 12, 12, 16, 58, 31, 24, DateTimeKind.Local).AddTicks(7010),
                            Description = "Une journée dédiée à la sécurité des réseaux et aux bonnes pratiques",
                            EventDate = new DateTime(2025, 1, 9, 16, 58, 31, 24, DateTimeKind.Local).AddTicks(7009),
                            Location = "Salle Sécurité",
                            MaxParticipants = 45,
                            Title = "Network Security Masterclass"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2024, 12, 10, 16, 58, 31, 24, DateTimeKind.Local).AddTicks(7014),
                            Description = "Les principes essentiels du design d'interface et de l'expérience utilisateur",
                            EventDate = new DateTime(2024, 12, 27, 16, 58, 31, 24, DateTimeKind.Local).AddTicks(7013),
                            Location = "Design Lab",
                            MaxParticipants = 30,
                            Title = "UX/UI Design Fundamentals"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2024, 12, 8, 16, 58, 31, 24, DateTimeKind.Local).AddTicks(7018),
                            Description = "Formation aux méthodologies agiles et à la gestion de projet moderne",
                            EventDate = new DateTime(2025, 1, 2, 16, 58, 31, 24, DateTimeKind.Local).AddTicks(7017),
                            Location = "Salle Agile",
                            MaxParticipants = 50,
                            Title = "Agile Project Management"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2024, 12, 6, 16, 58, 31, 24, DateTimeKind.Local).AddTicks(7022),
                            Description = "Explorez les outils et techniques d'analyse de données massives",
                            EventDate = new DateTime(2025, 1, 19, 16, 58, 31, 24, DateTimeKind.Local).AddTicks(7021),
                            Location = "Data Center",
                            MaxParticipants = 40,
                            Title = "Big Data Analytics"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2024, 12, 11, 16, 58, 31, 24, DateTimeKind.Local).AddTicks(7026),
                            Description = "Création de projets connectés avec Arduino et Raspberry Pi",
                            EventDate = new DateTime(2025, 1, 12, 16, 58, 31, 24, DateTimeKind.Local).AddTicks(7025),
                            Location = "Lab IoT",
                            MaxParticipants = 20,
                            Title = "IoT Workshop"
                        });
                });

            modelBuilder.Entity("MVC_cours_isitech.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "11111111-1111-1111-1111-111111111111",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "22222222-2222-2222-2222-222222222222",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "33333333-3333-3333-3333-333333333333",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "44444444-4444-4444-4444-444444444444",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "55555555-5555-5555-5555-555555555555",
                            RoleId = "3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MVC_cours_isitech.Models.Student", b =>
                {
                    b.HasBaseType("MVC_cours_isitech.Models.User");

                    b.Property<string>("Major")
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue("Student");

                    b.HasData(
                        new
                        {
                            Id = "44444444-4444-4444-4444-444444444444",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "96a93880-4548-4768-9b9a-d397dd91d319",
                            DateOfBirth = new DateOnly(2004, 12, 15),
                            Email = "lucas.petit@student.com",
                            EmailConfirmed = true,
                            Firstname = "Lucas",
                            Lastname = "Petit",
                            LockoutEnabled = false,
                            NormalizedEmail = "LUCAS.PETIT@STUDENT.COM",
                            NormalizedUserName = "LUCAS.PETIT@STUDENT.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMg+4XwZTYHBZ2qcPslqlKECew2r1yJ0W3b6IZZxFcyJQD7LCJObXnX08oTemzlhRw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "lucas.petit@student.com",
                            Major = "Computer Science"
                        },
                        new
                        {
                            Id = "55555555-5555-5555-5555-555555555555",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4e79031f-62b6-4311-af81-c9118dffe332",
                            DateOfBirth = new DateOnly(2002, 12, 15),
                            Email = "emma.moreau@student.com",
                            EmailConfirmed = true,
                            Firstname = "Emma",
                            Lastname = "Moreau",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMMA.MOREAU@STUDENT.COM",
                            NormalizedUserName = "EMMA.MOREAU@STUDENT.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIXuuKaoWyHLdUTHr8DVTLhXeuHATWwZS+6oiF0F2w48GsSXD0SAFTi8lVQ7QQIsNw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "emma.moreau@student.com",
                            Major = "Mathematics"
                        });
                });

            modelBuilder.Entity("MVC_cours_isitech.Models.Teacher", b =>
                {
                    b.HasBaseType("MVC_cours_isitech.Models.User");

                    b.Property<string>("Subject")
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue("Teacher");

                    b.HasData(
                        new
                        {
                            Id = "11111111-1111-1111-1111-111111111111",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "27c1fb3e-551b-4d28-9b92-c6ec6de8375c",
                            DateOfBirth = new DateOnly(1989, 12, 15),
                            Email = "martin.dupont@teacher.com",
                            EmailConfirmed = true,
                            Firstname = "Martin",
                            Lastname = "Dupont",
                            LockoutEnabled = false,
                            NormalizedEmail = "MARTIN.DUPONT@TEACHER.COM",
                            NormalizedUserName = "MARTIN.DUPONT@TEACHER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFr1vDTAysH7DrX1FPfbv9+K9npX+yyMd6l1bUpC/u6H10rIWRsfSBBQiwU8HzZFKw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "martin.dupont@teacher.com",
                            Subject = "Mathematics"
                        },
                        new
                        {
                            Id = "22222222-2222-2222-2222-222222222222",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "df3f375a-b787-4e98-965b-37e78ddc5fa4",
                            DateOfBirth = new DateOnly(1994, 12, 15),
                            Email = "sophie.martin@teacher.com",
                            EmailConfirmed = true,
                            Firstname = "Sophie",
                            Lastname = "Martin",
                            LockoutEnabled = false,
                            NormalizedEmail = "SOPHIE.MARTIN@TEACHER.COM",
                            NormalizedUserName = "SOPHIE.MARTIN@TEACHER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENGSnaIYELYglsolCCjG91WIMgjIwLoloavH7BltTKwAKhSpbhQVICFjuN2TjahHOw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "sophie.martin@teacher.com",
                            Subject = "Computer Science"
                        },
                        new
                        {
                            Id = "33333333-3333-3333-3333-333333333333",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f6ae3335-55e2-47a2-b4fa-7834f7ae2340",
                            DateOfBirth = new DateOnly(1984, 12, 15),
                            Email = "pierre.durand@teacher.com",
                            EmailConfirmed = true,
                            Firstname = "Pierre",
                            Lastname = "Durand",
                            LockoutEnabled = false,
                            NormalizedEmail = "PIERRE.DURAND@TEACHER.COM",
                            NormalizedUserName = "PIERRE.DURAND@TEACHER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGUOwOq3YD/o531VbVWLyPa4Vk35PIkT0vJB3i1fi44vBVKlh0vCRymK9xW4evs/JA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "pierre.durand@teacher.com",
                            Subject = "Physics"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MVC_cours_isitech.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MVC_cours_isitech.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVC_cours_isitech.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MVC_cours_isitech.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
